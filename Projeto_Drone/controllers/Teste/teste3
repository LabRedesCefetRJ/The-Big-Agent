#include <webots/robot.h>
#include <webots/motor.h>
#include <webots/inertial_unit.h>
#include <webots/gps.h>
#include <javino.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
#include <fcntl.h>
#include <unistd.h>
#include <termios.h>

#define TTY_EXOGENOUS_PORT "/dev/ttyExogenous0"

// Estados do drone
typedef enum {
    LANDED,         // 0
    TAKING_OFF,     // 1
    HOVERING,       // 2
    MOVING_FORWARD, // 3
    LANDING         // 4
} DroneState;

int main(int argc, char **argv) {
    // Configuração serial
    int serial = open(TTY_EXOGENOUS_PORT, O_RDWR | O_NOCTTY);
    if (serial < 0) {
        perror("Erro ao abrir porta serial");
        return 1;
    }

    // Configuração avançada da porta serial
    struct termios tty;
    tcgetattr(serial, &tty);
    tty.c_cflag &= ~PARENB;
    tty.c_cflag &= ~CSTOPB;
    tty.c_cflag |= CS8;
    tty.c_cflag &= ~CRTSCTS;
    tty.c_cflag |= CREAD | CLOCAL;
    tty.c_lflag &= ~ICANON;
    tty.c_cc[VTIME] = 1;
    tty.c_cc[VMIN] = 0;
    tcsetattr(serial, TCSANOW, &tty);
    
    wb_robot_init();
    int timeStep = (int)wb_robot_get_basic_time_step();

    // Dispositivos: motores e sensores
    WbDeviceTag motor_fl = wb_robot_get_device("front left propeller");
    WbDeviceTag motor_fr = wb_robot_get_device("front right propeller");
    WbDeviceTag motor_rl = wb_robot_get_device("rear left propeller");
    WbDeviceTag motor_rr = wb_robot_get_device("rear right propeller");
    
    // Inicialização segura dos motores
    wb_motor_set_position(motor_fl, INFINITY);
    wb_motor_set_position(motor_fr, INFINITY);
    wb_motor_set_position(motor_rl, INFINITY);
    wb_motor_set_position(motor_rr, INFINITY);
    wb_motor_set_velocity(motor_fl, 0.0);
    wb_motor_set_velocity(motor_fr, 0.0);
    wb_motor_set_velocity(motor_rl, 0.0);
    wb_motor_set_velocity(motor_rr, 0.0);

    WbDeviceTag imu = wb_robot_get_device("inertial unit");
    wb_inertial_unit_enable(imu, timeStep);
    WbDeviceTag gps = wb_robot_get_device("gps");
    wb_gps_enable(gps, timeStep);

    javino_init(serial);

    // Parâmetros de controle
    const double targetAltitude = 1.0;
    const double Kp_att = 8.0, Kd_att = 2.0;
    const double Kp_alt = 8.0, Kd_alt = 3.0;
    const double baseVel = 60.0;
    const double movePitch = -0.2;  // Inclinação para movimento frontal

    DroneState state = LANDED;
    double prevRoll = 0.0, prevPitch = 0.0;
    double prevAlt = 0.0;
    double stateStartTime = 0.0;
    double dt = timeStep / 1000.0;

    printf("Drone inicializado e aguardando comandos...\n");

    while (wb_robot_step(timeStep) != -1) {
        double currentTime = wb_robot_get_time();
        
        // Processamento de mensagens
        if (javino_avaliable_msg()) {
            char *msg = javino_get_msg();
            if (msg && msg[0] != '\0') {
                printf("Mensagem recebida: %s\n", msg);
                
                if (strcmp(msg, "takeoff") == 0 && state == LANDED) {
                    state = TAKING_OFF;
                    stateStartTime = currentTime;
                    printf("Iniciando decolagem\n");
                } 
                else if (strcmp(msg, "goAhead") == 0 && state == HOVERING) {
                    state = MOVING_FORWARD;
                    stateStartTime = currentTime;
                    printf("Iniciando movimento para frente\n");
                } 
                else if (strcmp(msg, "land") == 0 && (state == HOVERING || state == MOVING_FORWARD)) {
                    state = LANDING;
                    stateStartTime = currentTime;
                    printf("Iniciando pouso\n");
                }
            }
        }

        // Leitura dos sensores
        const double *rpy = wb_inertial_unit_get_roll_pitch_yaw(imu);
        double roll = rpy[0];
        double pitch = rpy[1];
        const double *gps_val = wb_gps_get_values(gps);
        double currAlt = gps_val[1];
        double rollRate = (roll - prevRoll) / dt;
        double pitchRate = (pitch - prevPitch) / dt;
        double vertVel = (currAlt - prevAlt) / dt;

        // Variáveis de controle
        double pitchCorr = 0.0, rollCorr = 0.0;
        double motorVelFL = 0.0, motorVelFR = 0.0;
        double motorVelRL = 0.0, motorVelRR = 0.0;
        double altError = targetAltitude - currAlt;
        double vertCorr = Kp_alt * altError - Kd_alt * vertVel;
        double v = baseVel + vertCorr;

        // Máquina de estados
        switch(state) {
            case LANDED:
                // Mantém todos os motores desligados
                motorVelFL = motorVelFR = motorVelRL = motorVelRR = 0.0;
                break;
                
            case TAKING_OFF:
                // Subida vertical
                motorVelFL = motorVelFR = motorVelRL = motorVelRR = v;
                
                // Verifica se atingiu a altura alvo
                if (currAlt >= targetAltitude * 0.95) {
                    state = HOVERING;
                    printf("Drone estabilizado em voo\n");
                }
                break;
                
            case HOVERING:
                // Controle de estabilização
                pitchCorr = - (Kp_att * pitch + Kd_att * pitchRate);
                rollCorr  = - (Kp_att * roll  + Kd_att * rollRate);
                
                motorVelFL = v - pitchCorr + rollCorr;
                motorVelFR = v - pitchCorr - rollCorr;
                motorVelRL = v + pitchCorr + rollCorr;
                motorVelRR = v + pitchCorr - rollCorr;
                break;
                
            case MOVING_FORWARD:
                // Controle de estabilização
                pitchCorr = - (Kp_att * pitch + Kd_att * pitchRate);
                rollCorr  = - (Kp_att * roll  + Kd_att * rollRate);
                
                // Adiciona inclinação para movimento frontal
                pitchCorr += Kp_att * movePitch;
                
                motorVelFL = v - pitchCorr + rollCorr;
                motorVelFR = v - pitchCorr - rollCorr;
                motorVelRL = v + pitchCorr + rollCorr;
                motorVelRR = v + pitchCorr - rollCorr;
                
                // Verifica tempo de movimento (5 segundos)
                if (currentTime - stateStartTime > 5.0) {
                    state = HOVERING;
                    printf("Movimento concluído\n");
                }
                break;
                
            case LANDING:
                // Redução gradual da altitude alvo
                double landProgress = (currentTime - stateStartTime) / 5.0;
                if (landProgress > 1.0) landProgress = 1.0;
                
                double targetLandingAlt = targetAltitude * (1.0 - landProgress);
                double landAltError = targetLandingAlt - currAlt;
                double landVertCorr = Kp_alt * landAltError - Kd_alt * vertVel;
                double landV = baseVel + landVertCorr;
                
                // Mantém estabilização durante o pouso
                pitchCorr = - (Kp_att * pitch + Kd_att * pitchRate);
                rollCorr  = - (Kp_att * roll  + Kd_att * rollRate);
                
                motorVelFL = landV - pitchCorr + rollCorr;
                motorVelFR = landV - pitchCorr - rollCorr;
                motorVelRL = landV + pitchCorr + rollCorr;
                motorVelRR = landV + pitchCorr - rollCorr;
                
                // Verifica se pousou
                if (currAlt < 0.1) {
                    state = LANDED;
                    printf("Drone pousado\n");
                }
                break;
        }

        // Aplica velocidades aos motores
        wb_motor_set_velocity(motor_fl, motorVelFL);
        wb_motor_set_velocity(motor_fr, -motorVelFR);  // Motor gira sentido anti-horário
        wb_motor_set_velocity(motor_rl, -motorVelRL);  // Motor gira sentido anti-horário
        wb_motor_set_velocity(motor_rr, motorVelRR);

        // Debug periódico
        if (fmod(currentTime, 10.0) < dt) {
            printf("Estado: %d | Altura: %.2f m | Velocidade base: %.2f\n",
                   state, currAlt, v);
        }

        prevRoll = roll;
        prevPitch = pitch;
        prevAlt  = currAlt;
    }

    close(serial);
    wb_robot_cleanup();
    return 0;
}